{
	"strict_mode": { "href": "/en-US/docs/Web/JavaScript/Reference/Strict_mode", "title": "Strict mode", "transitioning_to_strict_mode": { "href": "/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode", "title": "Transitioning to strict mode" } },
	"operators": {
		"in": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/in", "title": "in operator", "description": "The in operator returns true if the specified property is in the specified object or its prototype chain." },
		"new": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/new", "title": "new operator", "description": "The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function." },
		"this": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/this", "title": "this", "description": "A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode." },
		"void": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/void", "title": "void operator", "description": "The void operator evaluates the given expression and then returns undefined." },
		"yield": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/yield", "title": "yield", "description": "The yield keyword is used to pause and resume a generator function (function* or legacy generator function)." },
		"super": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/super", "title": "super", "description": "The super keyword is used to access and call functions on an object's parent." },
		"class": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/class", "title": "class expression", "description": "The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes use prototype-based inheritance." },
		"await": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/await", "title": "await", "description": "The await operator is used to wait for a Promise. It can only be used inside an async function." },
		"yield*": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/yield*", "title": "yield*", "description": "The yield* expression is used to delegate to another generator or iterable object." },
		"typeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/typeof", "title": "typeof", "description": "The typeof operator returns a string indicating the type of the unevaluated operand." },
		"delete": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/delete", "title": "delete operator", "description": "The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically." },
		"grouping": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Grouping", "title": "Grouping operator", "description": "The grouping operator ( ) controls the precedence of evaluation in expressions." },
		"function": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/function", "title": "function expression", "description": "The function keyword can be used to define a function inside an expression." },
		"function*": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/function*", "title": "function* expression", "description": "The function* keyword can be used to define a generator function inside an expression." },
		"new.target": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/new.target", "title": "new.target", "description": "The new.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined." },
		"instanceof": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/instanceof", "title": "instanceof", "description": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object." },
		"spread_syntax": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax", "title": "Spread syntax", "description": "Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected." },
		"async_function": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/async_function", "title": "async function expression", "description": "The async function keyword can be used to define async functions inside expressions." },
		"comma_operator": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator", "title": "Comma operator", "description": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand." },
		"bitwise_operators": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators", "title": "Bitwise operators", "description": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values." },
		"logical_operators": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators", "title": "Logical operators", "description": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value." },
		"pipeline_operator": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Pipeline_operator", "title": "Pipeline operator", "description": "The experimental pipeline operator |> (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:" },
		"property_accessors": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors", "title": "Property accessors", "description": "Property accessors provide access to an object's properties by using the dot notation or the bracket notation." },
		"object_initializer": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer", "title": "Object initializer", "description": "Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({})." },
		"expression_closures": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures", "title": "Expression closures", "description": "Expression closures are a shorthand function syntax for writing simple functions." },
		"operator_precedence": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence", "title": "Operator precedence", "description": "Operator precedence determines the way in which operators are parsed with respect to each other. Operators with higher precedence become the operands of operators with lower precedence." },
		"conditional_operator": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator", "title": "Conditional (ternary) operator", "description": "The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement." },
		"comparison_operators": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators", "title": "Comparison operators", "description": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison." },
		"assignment_operators": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators", "title": "Assignment operators", "description": "An assignment operator assigns a value to its left operand based on the value of its right operand." },
		"array_comprehensions": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions", "title": "Array comprehensions", "description": "The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!" },
		"arithmetic_operators": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators", "title": "Arithmetic operators", "description": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/)." },
		"generator_comprehensions": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions", "title": "Generator comprehensions", "description": "The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!" },
		"destructuring_assignment": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment", "title": "Destructuring assignment", "description": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables." },
		"legacy_generator_function": { "href": "/en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function", "title": "Legacy generator function expression", "description": "The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression." }
	},
	"methods_index": { "href": "/en-US/docs/Web/JavaScript/Reference/Methods_Index", "title": "Methods index" },
	"functions": {
		"set": { "href": "/en-US/docs/Web/JavaScript/Reference/Functions/set", "title": "setter", "description": "The set syntax binds an object property to a function to be called when there is an attempt to set that property." },
		"get": { "href": "/en-US/docs/Web/JavaScript/Reference/Functions/get", "title": "getter", "description": "The get syntax binds an object property to a function that will be called when that property is looked up." },
		"arguments": { "href": "/en-US/docs/Web/JavaScript/Reference/Functions/arguments", "title": "The arguments object", "description": "arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function." },
		"arrow_functions": { "href": "/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions", "title": "Arrow functions", "description": "An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors." },
		"rest_parameters": { "href": "/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters", "title": "Rest parameters", "description": "The rest parameter syntax allows us to represent an indefinite number of arguments as an array." },
		"default_parameters": { "href": "/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters", "title": "Default parameters", "description": "Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed." },
		"method_definitions": { "href": "/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions", "title": "Method definitions", "description": "Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method's name." }
	},
	"statements": {
		"let": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/let", "title": "let", "description": "The let statement declares a block scope local variable, optionally initializing it to a value." },
		"var": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/var", "title": "var", "description": "The var statement declares a variable, optionally initializing it to a value." },
		"for": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/for", "title": "for", "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop." },
		"with": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/with", "title": "with", "description": "The with statement extends the scope chain for a statement." },
		"empty": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/Empty", "title": "empty", "description": "An empty statement is used to provide no statement, although the JavaScript syntax would expect one." },
		"const": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/const", "title": "const", "description": "Constants are block-scoped, much like variables defined using the let statement. The value of a constant cannot change through reassignment, and it can't be redeclared." },
		"break": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/break", "title": "break", "description": "The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement." },
		"block": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/block", "title": "block", "description": "A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:" },
		"while": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/while", "title": "while", "description": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement." },
		"throw": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/throw", "title": "throw", "description": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate." },
		"class": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/class", "title": "class", "description": "The class declaration creates a new class with a given name using prototype-based inheritance." },
		"label": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/label", "title": "label", "description": "The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to." },
		"switch": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/switch", "title": "switch", "description": "The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case." },
		"return": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/return", "title": "return", "description": "The return statement ends function execution and specifies a value to be returned to the function caller." },
		"import": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/import", "title": "import", "description": "The static import statement is used to import features into JavaScript modules that have been exported by another module. " },
		"export": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/export", "title": "export", "description": "The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement." },
		"default": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/default", "title": "default", "description": "The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement." },
		"for...of": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/for...of", "title": "for...of", "description": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object." },
		"continue": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/continue", "title": "continue", "description": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration." },
		"debugger": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/debugger", "title": "debugger", "description": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect." },
		"for...in": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/for...in", "title": "for...in", "description": "The for...in statement iterates over all non-Symbol, enumerable properties of an object." },
		"function": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/function", "title": "function declaration", "description": "The function declaration (function statement) defines a function with the specified parameters." },
		"if...else": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/if...else", "title": "if...else", "description": "The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed." },
		"function*": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/function*", "title": "function*", "description": "The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object." },
		"do...while": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/do...while", "title": "do...while", "description": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once." },
		"try...catch": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/try...catch", "title": "try...catch", "description": "The try...catch statement marks a block of statements to try, and specifies a response, should an exception be thrown." },
		"import.meta": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/import.meta", "title": "import.meta", "description": "The import.meta object is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the module, like the module's URL." },
		"for_each...in": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in", "title": "for each...in", "description": "The for each...in statement iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed." },
		"async_function": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/async_function", "title": "async function", "description": "The async function declaration defines an asynchronous function, which returns an AsyncFunction object." },
		"for-await...of": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of", "title": "for await...of", "description": "The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object." },
		"legacy_generator_function": { "href": "/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function", "title": "Legacy generator function", "description": "The legacy generator function statement declares legacy generator functions with the specified parameters." }
	},
	"classes": { "static": { "href": "/en-US/docs/Web/JavaScript/Reference/Classes/static", "title": "static", "description": "The static keyword defines a static method for a class. Static methods aren't called on instances of the class. Instead, they're called on the class itself." }, "extends": { "href": "/en-US/docs/Web/JavaScript/Reference/Classes/extends", "title": "extends", "description": "The extends keyword is used in class declarations or class expressions to create a class which is a child of another class." }, "constructor": { "href": "/en-US/docs/Web/JavaScript/Reference/Classes/constructor", "title": "constructor", "description": "The constructor method is a special method for creating and initializing an object created within a class." } },
	"lexical_grammar": { "href": "/en-US/docs/Web/JavaScript/Reference/Lexical_grammar", "title": "Lexical grammar" },
	"errors": {
		"read-only": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Read-only", "title": "TypeError: \"x\" is read-only", "description": "TypeError" },
		"bad_radix": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix", "title": "RangeError: radix must be an integer", "description": "RangeError" },
		"bad_octal": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal", "title": "Warning: 08/09 is not a legal ECMA-262 octal constant", "description": "Warning. JavaScript execution won't be halted." },
		"getter_only": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only", "title": "TypeError: setting getter-only property \"x\"", "description": "TypeError in strict mode only." },
		"cant_delete": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete", "title": "TypeError: property \"x\" is non-configurable and can't be deleted", "description": "TypeError in strict mode only." },
		"not_defined": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined", "title": "ReferenceError: \"x\" is not defined", "description": "ReferenceError." },
		"dead_object": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Dead_object", "title": "TypeError: can't access dead object", "description": "TypeError" },
		"invalid_date": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date", "title": "RangeError: invalid date", "description": "RangeError" },
		"malformed_uri": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI", "title": "URIError: malformed URI sequence", "description": "URIError" },
		"no_properties": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/No_properties", "title": "TypeError: \"x\" has no properties", "description": "TypeError." },
		"not_a_function": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function", "title": "TypeError: \"x\" is not a function", "description": "TypeError." },
		"undeclared_var": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var", "title": "ReferenceError: assignment to undeclared variable \"x\"", "description": "ReferenceError warning in strict mode only." },
		"undefined_prop": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Undefined_prop", "title": "ReferenceError: reference to undefined property \"x\"", "description": "(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true." },
		"json_bad_parse": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse", "title": "SyntaxError: JSON.parse: bad parsing", "description": "SyntaxError" },
		"bad_regexp_flag": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag", "title": "SyntaxError: invalid regular expression flag \"x\"", "description": "SyntaxError" },
		"not_a_codepoint": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint", "title": "RangeError: argument is not a valid code point", "description": "String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111)." },
		"precision_range": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range", "title": "RangeError: precision is out of range", "description": "RangeError" },
		"equal_as_assign": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Equal_as_assign", "title": "SyntaxError: test for equality (==) mistyped as assignment (=)?", "description": "(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true." },
		"unexpected_type": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type", "title": "TypeError: \"x\" is (not) \"y\"", "description": "TypeError." },
		"is_not_iterable": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable", "title": "TypeError: 'x' is not iterable", "description": "TypeError" },
		"unexpected_token": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token", "title": "SyntaxError: Unexpected token", "description": "SyntaxError" },
		"deprecated_octal": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal", "title": "SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated", "description": "SyntaxError in strict mode only." },
		"no_variable_name": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name", "title": "SyntaxError: missing variable name", "description": "SyntaxError" },
		"not_a_constructor": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor", "title": "TypeError: \"x\" is not a constructor", "description": "TypeError" },
		"illegal_character": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character", "title": "SyntaxError: illegal character", "description": "SyntaxError" },
		"stmt_after_return": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return", "title": "Warning: unreachable code after return statement", "description": "Warning" },
		"too_much_recursion": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion", "title": "InternalError: too much recursion", "description": "When there are too many function calls, or a function is missing a base case, JavaScript will throw this error." },
		"no_non-null_object": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object", "title": "TypeError: \"x\" is not a non-null object", "description": "TypeError" },
		"var_hides_argument": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Var_hides_argument", "title": "TypeError: variable \"x\" redeclares argument", "description": "TypeError warning in strict mode only." },
		"already_has_pragma": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma", "title": "Warning: -file- is being assigned a //# sourceMappingURL, but already has one", "description": "A warning. JavaScript execution won't be halted." },
		"array_sort_argument": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument", "title": "TypeError: invalid Array.prototype.sort argument", "description": "TypeError" },
		"cyclic_object_value": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value", "title": "TypeError: cyclic object value", "description": "TypeError" },
		"reserved_identifier": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier", "title": "SyntaxError: \"x\" is a reserved identifier", "description": "SyntaxError" },
		"bad_return_or_yield": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield", "title": "SyntaxError: return not in function", "description": "SyntaxError." },
		"invalid_array_length": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length", "title": "RangeError: invalid array length", "description": "RangeError" },
		"redeclared_parameter": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter", "title": "SyntaxError: redeclaration of formal parameter \"x\"", "description": "SyntaxError" },
		"cant_access_property": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property", "title": "TypeError: can't access property \"x\" of \"y\"", "description": "TypeError." },
		"delete_in_strict_mode": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode", "title": "SyntaxError: applying the 'delete' operator to an unqualified name is deprecated", "description": "SyntaxError in strict mode only." },
		"in_operator_no_object": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object", "title": "TypeError: cannot use 'in' operator to search for 'x' in 'y'", "description": "TypeError" },
		"more_arguments_needed": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed", "title": "TypeError: More arguments needed", "description": "TypeError." },
		"cant_redefine_property": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property", "title": "TypeError: can't redefine non-configurable property \"x\"", "description": "TypeError" },
		"property_access_denied": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied", "title": "Error: Permission denied to access property \"x\"", "description": "There was attempt to access an object for which you have no permission. This is likely an <iframe> element loaded from a different domain for which you violated the same-origin policy." },
		"identifier_after_number": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number", "title": "SyntaxError: identifier starts immediately after numeric literal", "description": "SyntaxError" },
		"cant_assign_to_property": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property", "title": "TypeError: can't assign to property \"x\" on \"y\": not an object", "description": "TypeError." },
		"strict_non_simple_params": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params", "title": "SyntaxError: \"use strict\" not allowed in function with non-simple parameters", "description": "SyntaxError." },
		"missing_formal_parameter": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter", "title": "SyntaxError: missing formal parameter", "description": "SyntaxError" },
		"invalid_const_assignment": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment", "title": "TypeError: invalid assignment to const \"x\"", "description": "TypeError" },
		"negative_repetition_count": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count", "title": "RangeError: repeat count must be non-negative", "description": "RangeError" },
		"deprecated_tolocaleformat": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat", "title": "Warning: Date.prototype.toLocaleFormat is deprecated", "description": "Warning. JavaScript execution won't be halted." },
		"resulting_string_too_large": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large", "title": "RangeError: repeat count must be less than infinity", "description": "RangeError" },
		"malformed_formal_parameter": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter", "title": "SyntaxError: Malformed formal parameter", "description": "SyntaxError" },
		"invalid_for-of_initializer": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer", "title": "SyntaxError: a declaration in the head of a for-of loop can't have an initializer", "description": "SyntaxError" },
		"invalid_for-in_initializer": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer", "title": "SyntaxError: for-in loop head declarations may not have initializers", "description": "SyntaxError in strict mode only." },
		"unnamed_function_statement": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement", "title": "SyntaxError: function statement requires a name", "description": "SyntaxError" },
		"missing_bracket_after_list": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list", "title": "SyntaxError: missing ] after element list", "description": "SyntaxError." },
		"deprecated_string_generics": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics", "title": "Warning: String.x is deprecated; use String.prototype.x instead", "description": "Warning. JavaScript execution won't be halted." },
		"called_on_incompatible_type": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type", "title": "X.prototype.y called on incompatible type", "description": "TypeError" },
		"unterminated_string_literal": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal", "title": "SyntaxError: unterminated string literal", "description": "SyntaxError" },
		"deprecated_source_map_pragma": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma", "title": "SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead", "description": "A warning that a SyntaxError occurred. JavaScript execution won't be halted." },
		"missing_initializer_in_const": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const", "title": "SyntaxError: missing = in const declaration", "description": "SyntaxError" },
		"typed_array_invalid_arguments": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Typed_array_invalid_arguments", "title": "TypeError: invalid arguments", "description": "TypeError" },
		"non_configurable_array_element": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element", "title": "TypeError: can't delete non-configurable array element", "description": "TypeError" },
		"deprecated_expression_closures": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures", "title": "Warning: expression closures are deprecated", "description": "Warning. JavaScript execution won't be halted." },
		"missing_colon_after_property_id": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id", "title": "SyntaxError: missing : after property id", "description": "SyntaxError" },
		"missing_name_after_dot_operator": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator", "title": "SyntaxError: missing name after . operator", "description": "SyntaxError" },
		"for-each-in_loops_are_deprecated": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/For-each-in_loops_are_deprecated", "title": "Warning: JavaScript 1.6's for-each-in loops are deprecated", "description": "Warning" },
		"invalid_assignment_left-hand_side": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side", "title": "ReferenceError: invalid assignment left-hand side", "description": "ReferenceError." },
		"missing_curly_after_property_list": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list", "title": "SyntaxError: missing } after property list", "description": "SyntaxError" },
		"missing_curly_after_function_body": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body", "title": "SyntaxError: missing } after function body", "description": "SyntaxError" },
		"missing_semicolon_before_statement": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement", "title": "SyntaxError: missing ; before statement", "description": "SyntaxError." },
		"missing_parenthesis_after_condition": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition", "title": "SyntaxError: missing ) after condition", "description": "SyntaxError" },
		"deprecated_caller_or_arguments_usage": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage", "title": "ReferenceError: deprecated caller or arguments usage", "description": "A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won't be halted." },
		"missing_parenthesis_after_argument_list": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list", "title": "SyntaxError: missing ) after argument list", "description": "SyntaxError." },
		"cant_define_property_object_not_extensible": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible", "title": "TypeError: can't define property \"x\": \"obj\" is not extensible", "description": "TypeError" },
		"invalid_right_hand_side_instanceof_operand": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand", "title": "TypeError: invalid 'instanceof' operand 'x'", "description": "TypeError" },
		"reduce_of_empty_array_with_no_initial_value": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value", "title": "TypeError: Reduce of empty array with no initial value", "description": "TypeError" },
		"cant_access_lexical_declaration_before_init": { "href": "/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init", "title": "ReferenceError: can't access lexical declaration`X' before initialization", "description": "ReferenceError" }
	},
	"properties_index": { "href": "/en-US/docs/Web/JavaScript/Reference/Properties_Index", "title": "Properties index" },
	"template_literals": { "href": "/en-US/docs/Web/JavaScript/Reference/Template_literals", "title": "Template literals" },
	"global_objects": {
		"map": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
			"title": "Map",
			"description": "The Map object holds key-value pairs and remembers the original insertion order of the keys.",
			"get": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get", "title": "Map.prototype.get()", "description": "The get() method returns a specified element from a Map object." },
			"has": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has", "title": "Map.prototype.has()", "description": "The has() method returns a boolean indicating whether an element with the specified key exists or not." },
			"set": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set", "title": "Map.prototype.set()", "description": "The set() method adds or updates an element with a specified key and a value to a Map object." },
			"keys": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys", "title": "Map.prototype.keys()", "description": "The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order." },
			"size": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size", "title": "Map.prototype.size", "description": "The size accessor property returns the number of elements in a Map object." },
			"clear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear", "title": "Map.prototype.clear()", "description": "The clear() method removes all elements from a Map object." },
			"values": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values", "title": "Map.prototype.values()", "description": "The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order." },
			"delete": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete", "title": "Map.prototype.delete()", "description": "The delete() method removes the specified element from a Map object by key." },
			"entries": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries", "title": "Map.prototype.entries()", "description": "The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order." },
			"foreach": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach", "title": "Map.prototype.forEach()", "description": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order." },
			"@@species": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species", "title": "get Map[@@species]", "description": "The Map[@@species] accessor property returns the Map constructor." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype", "title": "Map.prototype", "description": "The Map.prototype property represents the prototype for the Map constructor." },
			"@@iterator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator", "title": "Map.prototype[@@iterator]()", "description": "The initial value of the @@iterator property is the same function object as the initial value of the entries method." },
			"@@tostringtag": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag", "title": "Map.prototype[@@toStringTag]", "description": "The Map[@@toStringTag] property has an initial value of \"Map\"." }
		},
		"set": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
			"title": "Set",
			"description": "The Set object lets you store unique values of any type, whether primitive values or object references.",
			"has": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has", "title": "Set.prototype.has()", "description": "The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not." },
			"add": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add", "title": "Set.prototype.add()", "description": "The add() method appends a new element with a specified value to the end of a Set object." },
			"size": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size", "title": "Set.prototype.size", "description": "The size accessor property returns the number of elements in a Set object." },
			"clear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear", "title": "Set.prototype.clear()", "description": "The clear() method removes all elements from a Set object." },
			"delete": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete", "title": "Set.prototype.delete()", "description": "The delete() method removes the specified element from a Set object." },
			"values": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values", "title": "Set.prototype.values()", "description": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order." },
			"entries": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries", "title": "Set.prototype.entries()", "description": "The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned." },
			"foreach": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach", "title": "Set.prototype.forEach()", "description": "The forEach() method executes a provided function once for each value in the Set object, in insertion order." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype", "title": "Set.prototype", "description": "The Set.prototype property represents the prototype for the Set constructor." },
			"@@species": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species", "title": "get Set[@@species]", "description": "The Set[@@species] accessor property returns the Set constructor." },
			"@@iterator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator", "title": "Set.prototype[@@iterator]()", "description": "The initial value of the @@iterator property is the same function object as the initial value of the values property." }
		},
		"nan": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN", "title": "NaN", "description": "The global NaN property is a value representing Not-A-Number." },
		"math": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
			"title": "Math",
			"description": "Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.",
			"e": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E", "title": "Math.E", "description": "The Math.E property represents the base of natural logarithms, e, approximately 2.718." },
			"pi": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI", "title": "Math.PI", "description": "The Math.PI property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159:" },
			"abs": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs", "title": "Math.abs()", "description": "The Math.abs() function returns the absolute value of a number" },
			"tan": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan", "title": "Math.tan()", "description": "The Math.tan() function returns the tangent of a number." },
			"ln2": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2", "title": "Math.LN2", "description": "The Math.LN2 property represents the natural logarithm of 2, approximately 0.693:" },
			"cos": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos", "title": "Math.cos()", "description": "The Math.cos() static function returns the cosine of the specified angle, which must be specified in radians. This value is " },
			"exp": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp", "title": "Math.exp()", "description": "The Math.exp() function returns ex, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms." },
			"log": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log", "title": "Math.log()", "description": "The Math.log() function returns the natural logarithm (base e) of a number, that is" },
			"max": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max", "title": "Math.max()", "description": "The Math.max() function returns the largest of zero or more numbers." },
			"min": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min", "title": "Math.min()", "description": "The static function Math.min() returns the lowest-valued number passed into it, or NaN if any parameter isn't a number and can't be converted into one." },
			"pow": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow", "title": "Math.pow()", "description": "The Math.pow() function returns the base to the exponent power, that is, baseexponent." },
			"sin": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin", "title": "Math.sin()", "description": "The Math.sin() function returns the sine of a number." },
			"tanh": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh", "title": "Math.tanh()", "description": "The Math.tanh() function returns the hyperbolic tangent of a number, that is" },
			"sinh": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh", "title": "Math.sinh()", "description": "The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e:" },
			"log2": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2", "title": "Math.log2()", "description": "The Math.log2() function returns the base 2 logarithm of a number, that is" },
			"atan": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan", "title": "Math.atan()", "description": "The Math.atan() function returns the arctangent (in radians) of a number, that is" },
			"sqrt": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt", "title": "Math.sqrt()", "description": "The Math.sqrt() function returns the square root of a number, that is" },
			"imul": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul", "title": "Math.imul()", "description": "The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters." },
			"asin": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin", "title": "Math.asin()", "description": "The Math.asin() function returns the arcsine (in radians) of a number, that is" },
			"acos": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos", "title": "Math.acos()", "description": "The Math.acos() function returns the arccosine (in radians) of a number, that is" },
			"cosh": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh", "title": "Math.cosh()", "description": "The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e:" },
			"sign": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign", "title": "Math.sign()", "description": "The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero." },
			"ln10": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10", "title": "Math.LN10", "description": "The Math.LN10 property represents the natural logarithm of 10, approximately 2.302:" },
			"ceil": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil", "title": "Math.ceil()", "description": "The Math.ceil() function returns the smallest integer greater than or equal to a given number." },
			"cbrt": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt", "title": "Math.cbrt()", "description": "The Math.cbrt() function returns the cube root of a number, that is" },
			"clz32": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32", "title": "Math.clz32()", "description": "The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number." },
			"hypot": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot", "title": "Math.hypot()", "description": "The Math.hypot() function returns the square root of the sum of squares of its arguments, that is:" },
			"floor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor", "title": "Math.floor()", "description": "The Math.floor() function returns the largest integer less than or equal to a given number." },
			"expm1": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1", "title": "Math.expm1()", "description": "The Math.expm1() function returns ex - 1, where x is the argument, and e the base of the natural logarithms." },
			"trunc": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc", "title": "Math.trunc()", "description": "The Math.trunc() function returns the integer part of a number by removing any fractional digits." },
			"atanh": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh", "title": "Math.atanh()", "description": "The Math.atanh() function returns the hyperbolic arctangent of a number, that is" },
			"atan2": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2", "title": "Math.atan2()", "description": "The Math.atan2() function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for Math.atan2(y,x)." },
			"asinh": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh", "title": "Math.asinh()", "description": "The Math.asinh() function returns the hyperbolic arcsine of a number, that is" },
			"round": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round", "title": "Math.round()", "description": "The Math.round() function returns the value of a number rounded to the nearest integer." },
			"acosh": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh", "title": "Math.acosh()", "description": "The Math.acosh() function returns the hyperbolic arc-cosine of a number, that is" },
			"log1p": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p", "title": "Math.log1p()", "description": "The Math.log1p() function returns the natural logarithm (base e) of 1 + a number, that is" },
			"sqrt2": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2", "title": "Math.SQRT2", "description": "The Math.SQRT2 property represents the square root of 2, approximately 1.414:" },
			"log10": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10", "title": "Math.log10()", "description": "The Math.log10() function returns the base 10 logarithm of a number, that is" },
			"log2e": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E", "title": "Math.LOG2E", "description": "The Math.LOG2E property represents the base 2 logarithm of e, approximately 1.442:" },
			"log10e": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E", "title": "Math.LOG10E", "description": "The Math.LOG10E property represents the base 10 logarithm of e, approximately 0.434:" },
			"fround": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround", "title": "Math.fround()", "description": "The Math.fround() function returns the nearest 32-bit single precision float representation of a Number." },
			"random": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random", "title": "Math.random()", "description": "The Math.random() function returns a floating-point, pseudo-random number in the range [0, 1) (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user." },
			"sqrt1_2": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2", "title": "Math.SQRT1_2", "description": "The Math.SQRT1_2 property represents the square root of 1/2 which is approximately 0.707:" }
		},
		"eval": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval", "title": "eval()", "description": "The eval() function evaluates JavaScript code represented as a string." },
		"json": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
			"title": "JSON",
			"description": "The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.",
			"parse": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse", "title": "JSON.parse()", "description": "The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned." },
			"stringify": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify", "title": "JSON.stringify()", "description": "The JSON.stringify() method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified." }
		},
		"date": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
			"title": "Date",
			"description": "Creates a JavaScript Date instance that represents a single moment in time in a platform-independent format.",
			"now": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now", "title": "Date.now()", "description": "The Date.now() method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC." },
			"utc": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC", "title": "Date.UTC()", "description": "The Date.UTC() method accepts the same parameters as the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC." },
			"parse": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse", "title": "Date.parse()", "description": "The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31)." },
			"tojson": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON", "title": "Date.prototype.toJSON()", "description": "The toJSON() method returns a string representation of the Date object." },
			"getday": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay", "title": "Date.prototype.getDay()", "description": "The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday." },
			"getdate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate", "title": "Date.prototype.getDate()", "description": "The getDate() method returns the day of the month for the specified date according to local time." },
			"gettime": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime", "title": "Date.prototype.getTime()", "description": "The getTime() method returns the number of milliseconds* since the Unix Epoch." },
			"getyear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear", "title": "Date.prototype.getYear()", "description": "The getYear() method returns the year in the specified date according to local time. Because getYear() does not return full years (\"year 2000 problem\"), it is no longer used and has been replaced by the getFullYear() method." },
			"setdate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate", "title": "Date.prototype.setDate()", "description": "The setDate() method sets the day of the Date object relative to the beginning of the currently set month." },
			"settime": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime", "title": "Date.prototype.setTime()", "description": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC." },
			"setyear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear", "title": "Date.prototype.setYear()", "description": "The setYear() method sets the year for a specified date according to local time. Because setYear() does not set full years (\"year 2000 problem\"), it is no longer used and has been replaced by the setFullYear() method." },
			"valueof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf", "title": "Date.prototype.valueOf()", "description": "The valueOf() method returns the primitive value of a Date object." },
			"sethours": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours", "title": "Date.prototype.setHours()", "description": "The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance." },
			"setmonth": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth", "title": "Date.prototype.setMonth()", "description": "The setMonth() method sets the month for a specified date according to the currently set year." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource", "title": "Date.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString", "title": "Date.prototype.toString()", "description": "The toString() method returns a string representing the specified Date object." },
			"gethours": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours", "title": "Date.prototype.getHours()", "description": "The getHours() method returns the hour for the specified date, according to local time." },
			"getmonth": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth", "title": "Date.prototype.getMonth()", "description": "The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year)." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype", "title": "Date.prototype", "description": "The Date.prototype property represents the prototype for the Date constructor." },
			"getutcday": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay", "title": "Date.prototype.getUTCDay()", "description": "The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday." },
			"setutcdate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate", "title": "Date.prototype.setUTCDate()", "description": "The setUTCDate() method sets the day of the month for a specified date according to universal time." },
			"setseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds", "title": "Date.prototype.setSeconds()", "description": "The setSeconds() method sets the seconds for a specified date according to local time." },
			"setminutes": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes", "title": "Date.prototype.setMinutes()", "description": "The setMinutes() method sets the minutes for a specified date according to local time." },
			"getutcdate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate", "title": "Date.prototype.getUTCDate()", "description": "The getUTCDate() method returns the day (date) of the month in the specified date according to universal time." },
			"getseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds", "title": "Date.prototype.getSeconds()", "description": "The getSeconds() method returns the seconds in the specified date according to local time." },
			"getminutes": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes", "title": "Date.prototype.getMinutes()", "description": "The getMinutes() method returns the minutes in the specified date according to local time." },
			"getutchours": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours", "title": "Date.prototype.getUTCHours()", "description": "The getUTCHours() method returns the hours in the specified date according to universal time." },
			"getutcmonth": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth", "title": "Date.prototype.getUTCMonth()", "description": "The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year)." },
			"setfullyear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear", "title": "Date.prototype.setFullYear()", "description": "The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp." },
			"setutchours": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours", "title": "Date.prototype.setUTCHours()", "description": "The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance." },
			"setutcmonth": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth", "title": "Date.prototype.setUTCMonth()", "description": "The setUTCMonth() method sets the month for a specified date according to universal time." },
			"togmtstring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString", "title": "Date.prototype.toGMTString()", "description": "The toGMTString() method converts a date to a string, using Internet Greenwich Mean Time (GMT) conventions. The exact format of the value returned by toGMTString() varies according to the platform and browser, in general it should represent a human readable date string." },
			"toisostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString", "title": "Date.prototype.toISOString()", "description": "The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\"." },
			"toutcstring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString", "title": "Date.prototype.toUTCString()", "description": "The toUTCString() method converts a date to a string, using the UTC time zone." },
			"getfullyear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear", "title": "Date.prototype.getFullYear()", "description": "The getFullYear() method returns the year of the specified date according to local time." },
			"todatestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString", "title": "Date.prototype.toDateString()", "description": "The toDateString() method returns the date portion of a Date object in English in the following format separated by spaces:" },
			"totimestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString", "title": "Date.prototype.toTimeString()", "description": "The toTimeString() method returns the time portion of a Date object in human readable form in American English." },
			"@@toprimitive": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive", "title": "Date.prototype[@@toPrimitive]", "description": "The [@@toPrimitive]() method converts a Date object to a primitive value." },
			"setutcseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds", "title": "Date.prototype.setUTCSeconds()", "description": "The setUTCSeconds() method sets the seconds for a specified date according to universal time." },
			"setutcminutes": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes", "title": "Date.prototype.setUTCMinutes()", "description": "The setUTCMinutes() method sets the minutes for a specified date according to universal time." },
			"getutcseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds", "title": "Date.prototype.getUTCSeconds()", "description": "The getUTCSeconds() method returns the seconds in the specified date according to universal time." },
			"getutcminutes": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes", "title": "Date.prototype.getUTCMinutes()", "description": "The getUTCMinutes() method returns the minutes in the specified date according to universal time." },
			"getutcfullyear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear", "title": "Date.prototype.getUTCFullYear()", "description": "The getUTCFullYear() method returns the year in the specified date according to universal time." },
			"tolocaleformat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat", "title": "Date.prototype.toLocaleFormat()", "description": "The non-standard toLocaleFormat() method converts a date to a string using the specified formatting. Intl.DateTimeFormat is an alternative to format dates in a standards-compliant way. See also the newer version of Date.prototype.toLocaleDateString()." },
			"tolocalestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString", "title": "Date.prototype.toLocaleString()", "description": "The toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent." },
			"setutcfullyear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear", "title": "Date.prototype.setUTCFullYear()", "description": "The setUTCFullYear() method sets the full year for a specified date according to universal time." },
			"getmilliseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds", "title": "Date.prototype.getMilliseconds()", "description": "The getMilliseconds() method returns the milliseconds in the specified date according to local time." },
			"setmilliseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds", "title": "Date.prototype.setMilliseconds()", "description": "The setMilliseconds() method sets the milliseconds for a specified date according to local time." },
			"gettimezoneoffset": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset", "title": "Date.prototype.getTimezoneOffset()", "description": "The getTimezoneOffset() method returns the time zone difference, in minutes, from current locale (host system settings) to UTC." },
			"getutcmilliseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds", "title": "Date.prototype.getUTCMilliseconds()", "description": "The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time." },
			"setutcmilliseconds": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds", "title": "Date.prototype.setUTCMilliseconds()", "description": "The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time." },
			"tolocaledatestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString", "title": "Date.prototype.toLocaleDateString()", "description": "The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent." },
			"tolocaletimestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString", "title": "Date.prototype.toLocaleTimeString()", "description": "The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent." }
		},
		"intl": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl",
			"title": "Intl",
			"description": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The INTL object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.",
			"getcanonicallocales": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales", "title": "Intl.getCanonicalLocales()", "description": "The Intl.getCanonicalLocales() method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags." }
		},
		"null": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/null", "title": "null", "description": "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values." },
		"array": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
			"title": "Array",
			"description": "The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.",
			"of": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of", "title": "Array.of()", "description": "The Array.of() method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments." },
			"pop": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop", "title": "Array.prototype.pop()", "description": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array." },
			"map": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map", "title": "Array.prototype.map()", "description": "The map() method creates a new array with the results of calling a provided function on every element in the calling array." },
			"sort": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort", "title": "Array.prototype.sort()", "description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values." },
			"some": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some", "title": "Array.prototype.some()", "description": "The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value." },
			"push": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push", "title": "Array.prototype.push()", "description": "The push() method adds one or more elements to the end of an array and returns the new length of the array." },
			"keys": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys", "title": "Array.prototype.keys()", "description": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array." },
			"join": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join", "title": "Array.prototype.join()", "description": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator." },
			"flat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat", "title": "Array.prototype.flat()", "description": "The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth." },
			"find": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find", "title": "Array.prototype.find()", "description": "The find() method returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned." },
			"fill": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill", "title": "Array.prototype.fill()", "description": "The fill() method fills (modifies) all the elements of an array from a start index (default zero) to an end index (default array length) with a static value. It returns the modified array." },
			"from": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from", "title": "Array.from()", "description": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object." },
			"every": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every", "title": "Array.prototype.every()", "description": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value." },
			"shift": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift", "title": "Array.prototype.shift()", "description": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array." },
			"slice": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice", "title": "Array.prototype.slice()", "description": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified." },
			"length": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length", "title": "Array.length", "description": "The length property of an object which is an instance of type Array sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array." },
			"values": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values", "title": "Array.prototype.values()", "description": "The values() method returns a new Array Iterator object that contains the values for each index in the array." },
			"splice": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice", "title": "Array.prototype.splice()", "description": "The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place." },
			"reduce": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce", "title": "Array.prototype.reduce()", "description": "The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value." },
			"filter": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter", "title": "Array.prototype.filter()", "description": "The filter() method creates a new array with all elements that pass the test implemented by the provided function." },
			"concat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat", "title": "Array.prototype.concat()", "description": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array." },
			"foreach": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach", "title": "Array.prototype.forEach()", "description": "The forEach() method executes a provided function once for each array element." },
			"unshift": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift", "title": "Array.prototype.unshift()", "description": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array." },
			"indexof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf", "title": "Array.prototype.indexOf()", "description": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present." },
			"entries": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries", "title": "Array.prototype.entries()", "description": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array." },
			"observe": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe", "title": "Array.observe()", "description": "The Array.observe() method was used for asynchronously observing changes to Arrays, similar to Object.observe() for objects. It provided a stream of changes in order of occurrence. It's equivalent to Object.observe() invoked with the accept type list [\"add\", \"update\", \"delete\", \"splice\"]. However, this API has been deprecated and removed from Browsers. You can use the more general Proxy object instead." },
			"reverse": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse", "title": "Array.prototype.reverse()", "description": "The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first." },
			"isarray": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray", "title": "Array.isArray()", "description": "The Array.isArray() method determines whether the passed value is an Array." },
			"flatmap": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap", "title": "Array.prototype.flatMap()", "description": "The flatMap() method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map followed by a flat of depth 1, but flatMap is often quite useful, as merging both into one method is slightly more efficient." },
			"includes": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes", "title": "Array.prototype.includes()", "description": "The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource", "title": "Array.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the array." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString", "title": "Array.prototype.toString()", "description": "The toString() method returns a string representing the specified array and its elements." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype", "title": "Array.prototype", "description": "Array instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Array instances. For example, you can add new methods and properties to extend all Array objects. This is used for polyfilling, for example." },
			"findindex": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex", "title": "Array.prototype.findIndex()", "description": "The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test." },
			"unobserve": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unobserve", "title": "Array.unobserve()", "description": "The Array.unobserve() method was used to remove observers set by Array.observe(), but has been deprecated and removed from Browsers. You can use the more general Proxy object instead." },
			"@@species": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species", "title": "get Array[@@species]", "description": "The Array[@@species] accessor property returns the Array constructor." },
			"@@iterator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator", "title": "Array.prototype[@@iterator]()", "description": "The initial value of the @@iterator property is the same function object as the initial value of the values() property." },
			"copywithin": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin", "title": "Array.prototype.copyWithin()", "description": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length." },
			"lastindexof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf", "title": "Array.prototype.lastIndexOf()", "description": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex." },
			"reduceright": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight", "title": "Array.prototype.reduceRight()", "description": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value." },
			"@@unscopables": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables", "title": "Array.prototype[@@unscopables]", "description": "The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 version. These properties are excluded from with statement bindings." },
			"tolocalestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString", "title": "Array.prototype.toLocaleString()", "description": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”)." }
		},
		"isnan": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN", "title": "isNaN()", "description": "The isNaN() function determines whether a value is NaN or not. Note: coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015." },
		"error": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
			"title": "Error",
			"description": "The Error constructor creates an error object.",
			"name": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name", "title": "Error.prototype.name", "description": "The name property represents a name for the type of error. The initial value is \"Error\"." },
			"stack": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack", "title": "Error.prototype.stack", "description": "The non-standard stack property of Error objects offer a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call." },
			"message": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message", "title": "Error.prototype.message", "description": "The message property is a human-readable description of the error." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString", "title": "Error.prototype.toString()", "description": "The toString() method returns a string representing the specified Error object." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource", "title": "Error.prototype.toSource()", "description": "The toSource() method returns code that could eval to the same error." },
			"filename": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName", "title": "Error.prototype.fileName", "description": "The fileName property contains the path to the file that raised this error." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype", "title": "Error.prototype", "description": "The Error.prototype property represents the prototype for the Error constructor." },
			"linenumber": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber", "title": "Error.prototype.lineNumber", "description": "The lineNumber property contains the line number in the file that raised this error." },
			"columnnumber": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber", "title": "Error.prototype.columnNumber", "description": "The columnNumber property contains the column number in the line of the file that raised this error." }
		},
		"proxy": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
			"title": "Proxy",
			"description": "The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).",
			"handler": {
				"set": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set", "title": "handler.set()", "description": "The handler.set() method is a trap for setting a property value." },
				"has": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/has", "title": "handler.has()", "description": "The handler.has() method is a trap for the in operator." },
				"get": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get", "title": "handler.get()", "description": "The handler.get() method is a trap for getting a property value." },
				"apply": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/apply", "title": "handler.apply()", "description": "The handler.apply() method is a trap for a function call." },
				"ownkeys": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/ownKeys", "title": "handler.ownKeys()", "description": "The handler.ownKeys() method is a trap for Reflect.ownKeys()." },
				"enumerate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/enumerate", "title": "handler.enumerate()", "description": "The handler.enumerate() method used to be a trap for for...in statements, but has been removed from the ECMAScript standard in ES2016 and is deprecated in browsers." },
				"construct": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/construct", "title": "handler.construct()", "description": "The handler.construct() method is a trap for the new operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself have a [[Construct]] internal method (i.e. new target must be valid)." },
				"isextensible": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/isExtensible", "title": "handler.isExtensible()", "description": "The handler.isExtensible() method is a trap for Object.isExtensible()." },
				"deleteproperty": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/deleteProperty", "title": "handler.deleteProperty()", "description": "The handler.deleteProperty() method is a trap for the delete operator." },
				"defineproperty": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/defineProperty", "title": "handler.defineProperty()", "description": "The handler.defineProperty() method is a trap for Object.defineProperty()." },
				"getprototypeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getPrototypeOf", "title": "handler.getPrototypeOf()", "description": "The handler.getPrototypeOf() method is a trap for the [[GetPrototypeOf]] internal method." },
				"setprototypeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/setPrototypeOf", "title": "handler.setPrototypeOf()", "description": "The handler.setPrototypeOf() method is a trap for Object.setPrototypeOf()." },
				"preventextensions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/preventExtensions", "title": "handler.preventExtensions()", "description": "The handler.preventExtensions() method is a trap for Object.preventExtensions()." },
				"getownpropertydescriptor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor", "title": "handler.getOwnPropertyDescriptor()", "description": "The handler.getOwnPropertyDescriptor() method is a trap for Object.getOwnPropertyDescriptor()." }
			}
		},
		"symbol": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
			"title": "Symbol",
			"description": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description", "title": "Symbol.prototype.description", "description": "The read-only description property is a string returning the optional description of Symbol objects." },
			"for": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for", "title": "Symbol.for()", "description": "The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key." },
			"match": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match", "title": "Symbol.match", "description": "The Symbol.match well-known symbol specifies the matching of a regular expression against a string. This function is called by the String.prototype.match() method." },
			"split": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split", "title": "Symbol.split", "description": "The Symbol.split well-known symbol specifies the method that splits a string at the indices that match a regular expression. This function is called by the String.prototype.split() method." },
			"search": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search", "title": "Symbol.search", "description": "The Symbol.search well-known symbol specifies the method that returns the index within a string that matches the regular expression. This function is called by the String.prototype.search() method." },
			"keyfor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor", "title": "Symbol.keyFor()", "description": "The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol." },
			"species": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species", "title": "Symbol.species", "description": "The well-known symbol Symbol.species specifies a function-valued property that the constructor function uses to create derived objects." },
			"replace": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace", "title": "Symbol.replace", "description": "The Symbol.replace well-known symbol specifies the method that replaces matched substrings of a string. This function is called by the String.prototype.replace() method." },
			"valueof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf", "title": "Symbol.prototype.valueOf()", "description": "The valueOf() method returns the primitive value of a Symbol object." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString", "title": "Symbol.prototype.toString()", "description": "The toString() method returns a string representing the specified Symbol object." },
			"iterator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator", "title": "Symbol.iterator", "description": "The Symbol.iterator well-known symbol specifies the default iterator for an object. Used by for...of." },
			"matchall": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll", "title": "Symbol.matchAll", "description": "The Symbol.matchAll well-known symbol returns an iterator, that yields matches of the regular expression against a string. This function is called by the String.prototype.matchAll() method." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource", "title": "Symbol.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/prototype", "title": "Symbol.prototype", "description": "The Symbol.prototype property represents the prototype for the Symbol constructor." },
			"hasinstance": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance", "title": "Symbol.hasInstance", "description": "The Symbol.hasInstance well-known symbol is used to determine if a constructor object recognizes an object as its instance. The instanceof operator's behavior can be customized by this symbol." },
			"toprimitive": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive", "title": "Symbol.toPrimitive", "description": "The Symbol.toPrimitive is a symbol that specifies a function valued property that is called to convert an object to a corresponding primitive value." },
			"tostringtag": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag", "title": "Symbol.toStringTag", "description": "The Symbol.toStringTag well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the Object.prototype.toString() method." },
			"unscopables": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables", "title": "Symbol.unscopables", "description": "The Symbol.unscopables well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the with environment bindings of the associated object." },
			"@@toprimitive": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive", "title": "Symbol.prototype[@@toPrimitive]", "description": "The [@@toPrimitive]() method converts a Symbol object to a primitive value." },
			"asynciterator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator", "title": "Symbol.asyncIterator", "description": "The Symbol.asyncIterator well-known symbol specifies the default AsyncIterator for an object. If this property is set on an object, it is an async iterable and can be used in a for await...of loop." },
			"isconcatspreadable": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable", "title": "Symbol.isConcatSpreadable", "description": "The Symbol.isConcatSpreadable well-known symbol is used to configure if an object should be flattened to its array elements when using the Array.prototype.concat() method." }
		},
		"string": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
			"title": "String",
			"description": "The String global object is a constructor for strings or a sequence of characters.",
			"big": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big", "title": "String.prototype.big()", "description": "The big() method creates a <big> HTML element that causes a string to be displayed in a big font." },
			"raw": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw", "title": "String.raw()", "description": "The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings, that is, substitutions (e.g. ${foo}) are processed, but escapes (e.g. \\n) are not." },
			"sup": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup", "title": "String.prototype.sup()", "description": "The sup() method creates a <sup> HTML element that causes a string to be displayed as superscript." },
			"sub": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub", "title": "String.prototype.sub()", "description": "The sub() method creates a <sub> HTML element that causes a string to be displayed as subscript." },
			"link": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link", "title": "String.prototype.link()", "description": "The link() method creates a string representing the code for an <a> HTML element to be used as a hypertext link to another URL." },
			"bold": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold", "title": "String.prototype.bold()", "description": "The bold() method creates a <b> HTML element that causes a string to be displayed as bold." },
			"trim": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim", "title": "String.prototype.trim()", "description": "The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.)." },
			"fixed": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed", "title": "String.prototype.fixed()", "description": "The fixed() method creates a <tt> HTML element that causes a string to be displayed in fixed-pitch font." },
			"blink": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink", "title": "String.prototype.blink()", "description": "The blink() method creates a <blink> HTML element that causes a string to blink." },
			"match": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match", "title": "String.prototype.match()", "description": "The match() method retrieves the result of matching a string against a regular expression." },
			"split": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split", "title": "String.prototype.split()", "description": "The split() method splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split." },
			"small": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small", "title": "String.prototype.small()", "description": "The small() method creates a <small> HTML element that causes a string to be displayed in a small font." },
			"slice": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice", "title": "String.prototype.slice()", "description": "The slice() method extracts a section of a string and returns it as a new string, without modifying the original string." },
			"quote": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote", "title": "String.prototype.quote()", "description": "The non-standard quote() method returns a copy of the string, replacing various special characters in the string with their escape sequences and wrapping the result in double-quotes (\")." },
			"length": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length", "title": "string.length", "description": "The length property of a String object indicates the length of a string, in UTF-16 code units." },
			"search": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search", "title": "String.prototype.search()", "description": "The search() method executes a search for a match between a regular expression and this String object." },
			"repeat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat", "title": "String.prototype.repeat()", "description": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together." },
			"strike": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike", "title": "String.prototype.strike()", "description": "The strike() method creates a <strike> HTML element that causes a string to be displayed as struck-out text." },
			"substr": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr", "title": "String.prototype.substr()", "description": "The substr() method returns a portion of the string, starting at the specified index and extending for a given number of characters afterward." },
			"charat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt", "title": "String.prototype.charAt()", "description": "The String object's charAt() method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string." },
			"anchor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor", "title": "String.prototype.anchor()", "description": "The anchor() method creates an <a> HTML anchor element that is used as a hypertext target." },
			"concat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat", "title": "String.prototype.concat()", "description": "The concat() method concatenates the string arguments to the calling string and returns a new string." },
			"padend": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd", "title": "String.prototype.padEnd()", "description": "The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string." },
			"replace": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace", "title": "String.prototype.replace()", "description": "The replace() method returns a new string with some or all matches of a pattern replaced by a replacement." },
			"indexof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf", "title": "String.prototype.indexOf()", "description": "The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found." },
			"italics": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics", "title": "String.prototype.italics()", "description": "The italics() method creates an <i> HTML element that causes a string to be italic." },
			"valueof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf", "title": "String.prototype.valueOf()", "description": "The valueOf() method returns the primitive value of a String object." },
			"trimend": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd", "title": "String.prototype.trimEnd()", "description": "The trimEnd() method removes whitespace from the end of a string. trimRight() is an alias of this method." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString", "title": "String.prototype.toString()", "description": "The toString() method returns a string representing the specified object." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource", "title": "String.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"matchall": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll", "title": "String.prototype.matchAll()", "description": "The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups." },
			"padstart": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart", "title": "String.prototype.padStart()", "description": "The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length." },
			"fontsize": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize", "title": "String.prototype.fontsize()", "description": "The fontsize() method creates a <font> HTML element that causes a string to be displayed in the specified font size." },
			"endswith": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith", "title": "String.prototype.endsWith()", "description": "The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate." },
			"includes": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes", "title": "String.prototype.includes()", "description": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate." },
			"fontcolor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor", "title": "String.prototype.fontcolor()", "description": "The fontcolor() method creates a <font> HTML element that causes a string to be displayed in the specified font color." },
			"substring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring", "title": "String.prototype.substring()", "description": "The substring() method returns the part of the string between the start and end indexes, or to the end of the string." },
			"trimstart": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart", "title": "String.prototype.trimStart()", "description": "The trimStart() method removes whitespace from the beginning of a string. trimLeft() is an alias of this method." },
			"normalize": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize", "title": "String.prototype.normalize()", "description": "The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first)." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype", "title": "String.prototype", "description": "The String.prototype property represents the String prototype object." },
			"startswith": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith", "title": "String.prototype.startsWith()", "description": "The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate." },
			"charcodeat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt", "title": "String.prototype.charCodeAt()", "description": "The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index." },
			"@@iterator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator", "title": "String.prototype[@@iterator]()", "description": "The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value." },
			"tolowercase": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase", "title": "String.prototype.toLowerCase()", "description": "The toLowerCase() method returns the calling string value converted to lower case." },
			"touppercase": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase", "title": "String.prototype.toUpperCase()", "description": "The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one)." },
			"lastindexof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf", "title": "String.prototype.lastIndexOf()", "description": "The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found." },
			"codepointat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt", "title": "String.prototype.codePointAt()", "description": "The codePointAt() method returns a non-negative integer that is the Unicode code point value." },
			"fromcharcode": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode", "title": "String.fromCharCode()", "description": "The static String.fromCharCode() method returns a string created from the specified sequence of UTF-16 code units." },
			"localecompare": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare", "title": "String.prototype.localeCompare()", "description": "The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order." },
			"fromcodepoint": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint", "title": "String.fromCodePoint()", "description": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points." },
			"tolocalelowercase": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase", "title": "String.prototype.toLocaleLowerCase()", "description": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings." },
			"tolocaleuppercase": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase", "title": "String.prototype.toLocaleUpperCase()", "description": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings." }
		},
		"locale": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale", "title": "Intl.Locale", "description": "The Intl.Locale constructor is a standard built-in property of the Intl object." },
		"object": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
			"title": "Object",
			"description": "The Object constructor creates an object wrapper.",
			"is": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is", "title": "Object.is()", "description": "The Object.is() method determines whether two values are the same value." },
			"seal": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal", "title": "Object.seal()", "description": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable." },
			"eval": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval", "title": "Object.prototype.eval()", "description": "The Object.eval() method used to evaluate a string of JavaScript code in the context of an object, however, this method has been removed." },
			"keys": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys", "title": "Object.keys()", "description": "The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop." },
			"count": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count", "title": "Object.prototype.__count__", "description": "The __count__ property used to store the count of enumerable properties on the object, but it has been removed." },
			"proto": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto", "title": "Object.prototype.__proto__", "description": "The __proto__ property of Object.prototype is an accessor property (a getter function and a setter function) that exposes the internal [[Prototype]] (either an object or null) of the object through which it is accessed." },
			"watch": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch", "title": "Object.prototype.watch()", "description": "The watch() method watches for a property to be assigned a value and runs a function when that occurs." },
			"values": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values", "title": "Object.values()", "description": "The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)." },
			"parent": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent", "title": "Object.prototype.__parent__", "description": "The __parent__ property used to point to an object's context, but it has been removed." },
			"freeze": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze", "title": "Object.freeze()", "description": "The Object.freeze() method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in." },
			"create": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create", "title": "Object.create()", "description": "The Object.create() method creates a new object, using an existing object as the prototype of the newly created object." },
			"assign": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign", "title": "Object.assign()", "description": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object." },
			"valueof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf", "title": "Object.prototype.valueOf()", "description": "The valueOf() method returns the primitive value of the specified object." },
			"unwatch": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch", "title": "Object.prototype.unwatch()", "description": "The unwatch() method removes a watchpoint set with the watch() method." },
			"observe": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe", "title": "Object.observe()", "description": "The Object.observe() method was used for asynchronously observing the changes to an object. It provided a stream of changes in the order in which they occur. However, this API has been deprecated and removed from browsers. You can use the more general Proxy object instead." },
			"entries": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries", "title": "Object.entries()", "description": "The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well). The order of the array returned by Object.entries() does not depend on how an object is defined. If there is a need for certain ordering then the array should be sorted first like Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString", "title": "Object.prototype.toString()", "description": "The toString() method returns a string representing the object." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource", "title": "Object.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"issealed": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed", "title": "Object.isSealed()", "description": "The Object.isSealed() method determines if an object is sealed." },
			"isfrozen": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen", "title": "Object.isFrozen()", "description": "The Object.isFrozen() determines if an object is frozen." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype", "title": "Object.prototype", "description": "The Object.prototype is a property of the Object constructor. And it is also the end of a prototype chain." },
			"unobserve": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unobserve", "title": "Object.unobserve()", "description": "The Object.unobserve() method was used to remove observers set by Object.observe(), but has been deprecated and removed from Browsers. You can use the more general Proxy object instead." },
			"getnotifier": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getNotifier", "title": "Object.getNotifier()", "description": "The Object.getNotifer() method was used to create an object that allows to synthetically trigger a change, but has been deprecated and removed in browsers." },
			"constructor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor", "title": "Object.prototype.constructor", "description": "The constructor property returns a reference to the Object constructor function that created the instance object. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\"." },
			"fromentries": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries", "title": "Object.fromEntries()", "description": "The Object.fromEntries() method transforms a list of key-value pairs into an object." },
			"isextensible": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible", "title": "Object.isExtensible()", "description": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it)." },
			"nosuchmethod": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod", "title": "Object.prototype.__noSuchMethod__", "description": "The __noSuchMethod__ property used to reference a function to be executed when a non-existent method is called on an object, but this function is no longer available." },
			"isprototypeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf", "title": "Object.prototype.isPrototypeOf()", "description": "The isPrototypeOf() method checks if an object exists in another object's prototype chain." },
			"defineproperty": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty", "title": "Object.defineProperty()", "description": "The static method Object.defineProperty() defines a new property directly on an object, or modifies an existing property on an object, and returns the object." },
			"getprototypeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf", "title": "Object.getPrototypeOf()", "description": "The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object." },
			"hasownproperty": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty", "title": "Object.prototype.hasOwnProperty()", "description": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it)." },
			"tolocalestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString", "title": "Object.prototype.toLocaleString()", "description": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes." },
			"setprototypeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf", "title": "Object.setPrototypeOf()", "description": "The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null." },
			"__lookupsetter__": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__", "title": "Object.prototype.__lookupSetter__()", "description": "The __lookupSetter__ method returns the function bound as a setter to the specified property." },
			"__lookupgetter__": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__", "title": "Object.prototype.__lookupGetter__()", "description": "The __lookupGetter__ method returns the function bound as a getter to the specified property." },
			"__definesetter__": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__", "title": "Object.prototype.__defineSetter__()", "description": "The __defineSetter__ method binds an object's property to a function to be called when an attempt is made to set that property." },
			"__definegetter__": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__", "title": "Object.prototype.__defineGetter__()", "description": "The __defineGetter__ method binds an object's property to a function to be called when that property is looked up." },
			"defineproperties": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties", "title": "Object.defineProperties()", "description": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object." },
			"preventextensions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions", "title": "Object.preventExtensions()", "description": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object)." },
			"getownpropertynames": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames", "title": "Object.getOwnPropertyNames()", "description": "The Object.getOwnPropertyNames() method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object." },
			"propertyisenumerable": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable", "title": "Object.prototype.propertyIsEnumerable()", "description": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable." },
			"getownpropertysymbols": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols", "title": "Object.getOwnPropertySymbols()", "description": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object." },
			"getownpropertydescriptor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor", "title": "Object.getOwnPropertyDescriptor()", "description": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object." },
			"getownpropertydescriptors": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors", "title": "Object.getOwnPropertyDescriptors()", "description": "The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object." }
		},
		"number": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
			"title": "Number",
			"description": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.",
			"nan": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN", "title": "Number.NaN", "description": "The Number.NaN property represents Not-A-Number. Equivalent of NaN." },
			"isnan": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN", "title": "Number.isNaN()", "description": "The Number.isNaN() method determines whether the passed value is NaN and its type is Number. It is a more robust version of the original, global isNaN()." },
			"valueof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf", "title": "Number.prototype.valueOf()", "description": "The valueOf() method returns the wrapped primitive value of a Number object." },
			"tofixed": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed", "title": "Number.prototype.toFixed()", "description": "The toFixed() method formats a number using fixed-point notation." },
			"epsilon": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON", "title": "Number.EPSILON", "description": "The Number.EPSILON property represents the difference between 1 and the smallest floating point number greater than 1." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString", "title": "Number.prototype.toString()", "description": "The toString() method returns a string representing the specified Number object." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource", "title": "Number.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"isfinite": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite", "title": "Number.isFinite()", "description": "The Number.isFinite() method determines whether the passed value is a finite number." },
			"parseint": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt", "title": "Number.parseInt()", "description": "The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype", "title": "Number.prototype", "description": "The Number.prototype property represents the prototype for the Number constructor." },
			"min_value": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE", "title": "Number.MIN_VALUE", "description": "The Number.MIN_VALUE property represents the smallest positive numeric value representable in JavaScript." },
			"tointeger": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger", "title": "Number.toInteger()", "description": "The Number.toInteger() method used to evaluate the passed value and convert it to an integer, but its implementation has been removed." },
			"max_value": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE", "title": "Number.MAX_VALUE", "description": "The Number.MAX_VALUE property represents the maximum numeric value representable in JavaScript." },
			"isinteger": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger", "title": "Number.isInteger()", "description": "The Number.isInteger() method determines whether the passed value is an integer." },
			"parsefloat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat", "title": "Number.parseFloat()", "description": "The Number.parseFloat() method parses a string argument and returns a floating point number." },
			"toprecision": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision", "title": "Number.prototype.toPrecision()", "description": "The toPrecision() method returns a string representing the Number object to the specified precision." },
			"toexponential": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential", "title": "Number.prototype.toExponential()", "description": "The toExponential() method returns a string representing the Number object in exponential notation." },
			"issafeinteger": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger", "title": "Number.isSafeInteger()", "description": "The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer." },
			"tolocalestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString", "title": "Number.prototype.toLocaleString()", "description": "The toLocaleString() method returns a string with a language-sensitive representation of this number." },
			"max_safe_integer": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER", "title": "Number.MAX_SAFE_INTEGER", "description": "The Number.MAX_SAFE_INTEGER constant represents the maximum safe integer in JavaScript (253 - 1)." },
			"min_safe_integer": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER", "title": "Number.MIN_SAFE_INTEGER", "description": "The Number.MIN_SAFE_INTEGER constant represents the minimum safe integer in JavaScript (-(253 - 1))." },
			"positive_infinity": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY", "title": "Number.POSITIVE_INFINITY", "description": "The Number.POSITIVE_INFINITY property represents the positive Infinity value." },
			"negative_infinity": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY", "title": "Number.NEGATIVE_INFINITY", "description": "The Number.NEGATIVE_INFINITY property represents the negative Infinity value." }
		},
		"escape": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape", "title": "escape()", "description": "The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence." },
		"bigint": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
			"title": "BigInt",
			"description": "BigInt is a built-in object that provides a way to represent whole numbers larger than 253, which is the largest number JavaScript can reliably represent with the Number primitive.",
			"asintn": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN", "title": "BigInt.asIntN()", "description": "The BigInt.asIntN static method is used to wrap a BigInt between -2width-1 and 2width-1-1." },
			"asuintn": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN", "title": "BigInt.asUintN()", "description": "The BigInt.asUintN static method is used to wrap a BigInt between 0 and 2width-1." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/prototype", "title": "BigInt.prototype", "description": "The BigInt.prototype property represents the prototype for the BigInt constructor." }
		},
		"uneval": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval", "title": "uneval()", "description": "The uneval() function creates a string representation of the source code of an Object." },
		"regexp": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
			"title": "RegExp",
			"description": "The RegExp constructor creates a regular expression object for matching text with a pattern.",
			"n": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n", "title": "RegExp.$1-$9", "description": "The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties are static and read-only properties of regular expressions that contain parenthesized substring matches." },
			"exec": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec", "title": "RegExp.prototype.exec()", "description": "The exec() method executes a search for a match in a specified string. Returns a result array, or null." },
			"test": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test", "title": "RegExp.prototype.test()", "description": "The test() method executes a search for a match between a regular expression and a specified string. Returns true or false." },
			"flags": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags", "title": "RegExp.prototype.flags", "description": "The flags property returns a string consisting of the flags of the current regular expression object." },
			"input": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input", "title": "RegExp.input ($_)", "description": "The non-standard input property is a static property of regular expressions that contains the string against which a regular expression is matched. RegExp.$_ is an alias for this property." },
			"global": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global", "title": "RegExp.prototype.global", "description": "The global property indicates whether or not the \"g\" flag is used with the regular expression. global is a read-only property of an individual regular expression instance." },
			"dotall": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll", "title": "RegExp.prototype.dotAll", "description": "The dotAll property indicates whether or not the \"s\" flag is used with the regular expression. dotAll is a read-only property of an individual regular expression instance." },
			"sticky": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky", "title": "RegExp.prototype.sticky", "description": "The sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky is a read-only property of an individual regular expression object." },
			"source": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source", "title": "RegExp.prototype.source", "description": "The source property returns a String containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags." },
			"compile": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile", "title": "RegExp.prototype.compile()", "description": "The deprecated compile() method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the RegExp constructor." },
			"unicode": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode", "title": "RegExp.prototype.unicode", "description": "The unicode property indicates whether or not the \"u\" flag is used with a regular expression. unicode is a read-only property of an individual regular expression instance." },
			"@@match": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match", "title": "RegExp.prototype[@@match]()", "description": "The [@@match]() method retrieves the matches when matching a string against a regular expression." },
			"@@split": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split", "title": "RegExp.prototype[@@split]()", "description": "The [@@split]() method splits a String object into an array of strings by separating the string into substrings." },
			"@@search": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search", "title": "RegExp.prototype[@@search]()", "description": "The [@@search]() method executes a search for a match between a this regular expression and a string." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toSource", "title": "RegExp.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString", "title": "RegExp.prototype.toString()", "description": "The toString() method returns a string representing the regular expression." },
			"multiline": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline", "title": "RegExp.prototype.multiline", "description": "The multiline property indicates whether or not the \"m\" flag is used with the regular expression. multiline is a read-only property of an individual regular expression instance." },
			"@@species": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species", "title": "get RegExp[@@species]", "description": "The RegExp[@@species] accessor property returns the RegExp constructor." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype", "title": "RegExp.prototype", "description": "The RegExp.prototype property represents the prototype object for the RegExp constructor." },
			"lastparen": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen", "title": "RegExp.lastParen ($+)", "description": "The non-standard lastParen property is a static and read-only property of regular expressions that contains the last parenthesized substring match, if any. RegExp.$+ is an alias for this property." },
			"@@replace": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace", "title": "RegExp.prototype[@@replace]()", "description": "The [@@replace]() method replaces some or all matches of a this pattern in a string by a replacement, and returns the result of the replacement as a new string. The replacement can be a string or a function to be called for each match." },
			"lastmatch": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch", "title": "RegExp.lastMatch ($&)", "description": "The non-standard lastMatch property is a static and read-only property of regular expressions that contains the last matched characters. RegExp.$& is an alias for this property." },
			"lastindex": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex", "title": "regexp.lastIndex", "description": "The lastIndex is a read/write integer property of regular expression instances that specifies the index at which to start the next match." },
			"ignorecase": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase", "title": "RegExp.prototype.ignoreCase", "description": "The ignoreCase property indicates whether or not the \"i\" flag is used with the regular expression. ignoreCase is a read-only property of an individual regular expression instance." },
			"@@matchall": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll", "title": "RegExp.prototype[@@matchAll]()", "description": "The [@@matchAll] method returns all matches of the regular expression against a string." },
			"leftcontext": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext", "title": "RegExp.leftContext ($`)", "description": "The non-standard leftContext property is a static and read-only property of regular expressions that contains the substring preceding the most recent match. RegExp.$` is an alias for this property." },
			"rightcontext": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext", "title": "RegExp.rightContext ($')", "description": "The non-standard rightContext property is a static and read-only property of regular expressions that contains the substring following the most recent match. RegExp.$' is an alias for this property." }
		},
		"atomics": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
			"title": "Atomics",
			"description": "The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.",
			"or": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or", "title": "Atomics.or()", "description": "The static Atomics.or() method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back." },
			"add": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add", "title": "Atomics.add()", "description": "The static Atomics.add() method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back." },
			"and": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and", "title": "Atomics.and()", "description": "The static Atomics.and() method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back." },
			"sub": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub", "title": "Atomics.sub()", "description": "The static Atomics.sub() method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back." },
			"xor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor", "title": "Atomics.xor()", "description": "The static Atomics.xor() method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back." },
			"wait": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait", "title": "Atomics.wait()", "description": "The static Atomics.wait() method verifies that a given position in an Int32Array still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\"." },
			"load": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load", "title": "Atomics.load()", "description": "The static Atomics.load() method returns a value at a given position in the array." },
			"store": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store", "title": "Atomics.store()", "description": "The static Atomics.store() method stores a given value at the given position in the array and returns that value." },
			"notify": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify", "title": "Atomics.notify()", "description": "The static Atomics.notify() method notifies up some agents that are sleeping in the wait queue." },
			"exchange": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange", "title": "Atomics.exchange()", "description": "The static Atomics.exchange() method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value." },
			"islockfree": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree", "title": "Atomics.isLockFree()", "description": "The static Atomics.isLockFree() method is used to determine whether to use locks or atomic operations. It returns true, if the given size is one of the BYTES_PER_ELEMENT property of integer TypedArray types." },
			"compareexchange": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange", "title": "Atomics.compareExchange()", "description": "The static Atomics.compareExchange() method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value.  It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back." }
		},
		"boolean": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
			"title": "Boolean",
			"description": "The Boolean object is an object wrapper for a boolean value.",
			"valueof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf", "title": "Boolean.prototype.valueOf()", "description": "The valueOf() method returns the primitive value of a Boolean object." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString", "title": "Boolean.prototype.toString()", "description": "The toString() method returns a string representing the specified Boolean object." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource", "title": "Boolean.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype", "title": "Boolean.prototype", "description": "The Boolean.prototype property represents the prototype for the Boolean constructor." }
		},
		"promise": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
			"title": "Promise",
			"description": "The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.",
			"all": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all", "title": "Promise.all()", "description": "The Promise.all() method returns a single Promise that resolves when all of the promises passed as an iterable have resolved or when the iterable contains no promises. It rejects with the reason of the first promise that rejects." },
			"then": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then", "title": "Promise.prototype.then()", "description": "The then() method returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise." },
			"race": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race", "title": "Promise.race()", "description": "The Promise.race() method returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise." },
			"catch": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch", "title": "Promise.prototype.catch()", "description": "The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected) (in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)). This means that you have to provide onRejected function even if you want to fallback to undefined result value - for example obj.catch(() => {})." },
			"reject": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject", "title": "Promise.reject()", "description": "The Promise.reject() method returns a Promise object that is rejected with a given reason." },
			"resolve": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve", "title": "Promise.resolve()", "description": "The Promise.resolve() method returns a Promise object that is resolved with a given value. If the value is a promise, that promise is returned; if the value is a thenable (i.e. has a \"then\" method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value. This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer." },
			"finally": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally", "title": "Promise.prototype.finally()", "description": "The finally() method returns a Promise. When the promise is settled, i.e either fulfilled or rejected, the specified callback function is executed. This provides a way for code to be run whether the promise was fulfilled successfully or rejected once the Promise has been dealt with." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/prototype", "title": "Promise.prototype", "description": "The Promise.prototype property represents the prototype for the Promise constructor." }
		},
		"weakmap": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
			"title": "WeakMap",
			"description": "The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced.  The keys must be objects and the values can be arbitrary values.",
			"has": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has", "title": "WeakMap.prototype.has()", "description": "The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not." },
			"set": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set", "title": "WeakMap.prototype.set()", "description": "The set() method adds a new element with a specified key and value to a WeakMap object." },
			"get": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get", "title": "WeakMap.prototype.get()", "description": "The get() method returns a specified element from a WeakMap object." },
			"clear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear", "title": "WeakMap.prototype.clear()", "description": "The clear() method used to remove all elements from a WeakMap object, but is no longer part of ECMAScript and its implementations." },
			"delete": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete", "title": "WeakMap.prototype.delete()", "description": "The delete() method removes the specified element from a WeakMap object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/prototype", "title": "WeakMap.prototype", "description": "The WeakMap.prototype property represents the prototype for the WeakMap constructor." }
		},
		"weakset": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
			"title": "WeakSet",
			"description": "The WeakSet object lets you store weakly held objects in a collection.",
			"has": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has", "title": "WeakSet.prototype.has()", "description": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not." },
			"add": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add", "title": "WeakSet.prototype.add()", "description": "The add() method appends a new object to the end of a WeakSet object." },
			"clear": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear", "title": "WeakSet.prototype.clear()", "description": "The clear() method used to remove all elements from a WeakSet object, but is no longer part of ECMAScript and its implementations." },
			"delete": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete", "title": "WeakSet.prototype.delete()", "description": "The delete() method removes the specified element from a WeakSet object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/prototype", "title": "WeakSet.prototype", "description": "The WeakSet.prototype property represents the prototype for the WeakSet constructor." }
		},
		"reflect": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
			"title": "Reflect",
			"description": "Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible.",
			"get": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get", "title": "Reflect.get()", "description": "The static Reflect.get() method works like getting a property from an object (target[propertyKey]) as a function." },
			"has": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has", "title": "Reflect.has()", "description": "The static Reflect.has() method works like the in operator as a function." },
			"set": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set", "title": "Reflect.set()", "description": "The static Reflect.set() method works like setting a property on an object." },
			"apply": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply", "title": "Reflect.apply()", "description": "The static Reflect.apply() method calls a target function with arguments as specified." },
			"ownkeys": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys", "title": "Reflect.ownKeys()", "description": "The static Reflect.ownKeys() method returns an array of the target object's own property keys." },
			"enumerate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/enumerate", "title": "Reflect.enumerate()", "description": "The static Reflect.enumerate() method used to return an iterator with the enumerable own and inherited properties of the target object, but has been removed in ECMAScript 2016 and is deprecated in browsers." },
			"construct": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct", "title": "Reflect.construct()", "description": "The static Reflect.construct() method acts like the new operator, but as a function. It is equivalent to calling new target(...args). It gives also the added option to specify a different prototype." },
			"isextensible": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible", "title": "Reflect.isExtensible()", "description": "The static Reflect.isExtensible() method determines if an object is extensible (whether it can have new properties added to it). It is similar to Object.isExtensible(), but with some differences." },
			"defineproperty": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty", "title": "Reflect.defineProperty()", "description": "The static Reflect.defineProperty() method is like Object.defineProperty() but returns a Boolean." },
			"setprototypeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf", "title": "Reflect.setPrototypeOf()", "description": "The static Reflect.setPrototypeOf() method is the same method as Object.setPrototypeOf(). It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or to null." },
			"deleteproperty": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty", "title": "Reflect.deleteProperty()", "description": "The static Reflect.deleteProperty() method allows to delete properties. It is like the delete operator as a function." },
			"getprototypeof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf", "title": "Reflect.getPrototypeOf()", "description": "The static Reflect.getPrototypeOf() method is almost the same method as Object.getPrototypeOf(). It returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object." },
			"preventextensions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions", "title": "Reflect.preventExtensions()", "description": "The static Reflect.preventExtensions() method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to Object.preventExtensions(), but with some differences." },
			"getownpropertydescriptor": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor", "title": "Reflect.getOwnPropertyDescriptor()", "description": "The static Reflect.getOwnPropertyDescriptor() method is similar to Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise." }
		},
		"function": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
			"title": "Function",
			"description": "The Function constructor creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to eval. However, unlike eval, the Function constructor creates functions which execute in the global scope only.",
			"call": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call", "title": "Function.prototype.call()", "description": "The call() method calls a function with a given this value and arguments provided individually." },
			"bind": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind", "title": "Function.prototype.bind()", "description": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called." },
			"name": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name", "title": "Function.prototype.name", "description": "A Function object's read-only name property indicates the function's name as specified when it was created, or \"anonymous\" for functions created anonymously." },
			"arity": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity", "title": "Function.arity", "description": "The arity property used to return the number of arguments expected by the function, however, it no longer exists and has been replaced by the Function.prototype.length property." },
			"apply": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply", "title": "Function.prototype.apply()", "description": "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object)." },
			"caller": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller", "title": "Function.caller", "description": "The function.caller property returns the function that invoked the specified function. This property is forbidden in strict model." },
			"length": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length", "title": "Function.length", "description": "The length property indicates the number of parameters expected by the function." },
			"tosource": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource", "title": "Function.prototype.toSource()", "description": "The toSource() method returns a string representing the source code of the object." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString", "title": "Function.prototype.toString()", "description": "The toString() method returns a string representing the source code of the function." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype", "title": "Function.prototype", "description": "The Function.prototype property represents the Function prototype object." },
			"arguments": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments", "title": "Function.arguments", "description": "The function.arguments property refers to an an array-like object corresponding to the arguments passed to a function. Use the simple variable arguments instead. This property is forbidden in strict model due to tail call optimization." },
			"isgenerator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator", "title": "Function.prototype.isGenerator()", "description": "The non-standard isGenerator() method used to determine whether or not a function is a generator. It has been removed from Firefox starting with version 58." },
			"displayname": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName", "title": "Function.displayName", "description": "The function.displayName property returns the display name of the function." }
		},
		"infinity": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity", "title": "Infinity", "description": "The global Infinity property is a numeric value representing infinity." },
		"collator": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator",
			"title": "Intl.Collator",
			"description": "The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison.",
			"compare": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/compare", "title": "Intl.Collator.prototype.compare()", "description": "The Intl.Collator.prototype.compare() method compares two strings according to the sort order of this Collator object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/prototype", "title": "Intl.Collator.prototype", "description": "The Intl.Collator.prototype property represents the prototype object for the Intl.Collator constructor." },
			"resolvedoptions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/resolvedOptions", "title": "Intl.Collator.prototype.resolvedOptions()", "description": "The Intl.Collator.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and collation options computed during initialization of this Collator object." },
			"supportedlocalesof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/supportedLocalesOf", "title": "Intl.Collator.supportedLocalesOf()", "description": "The Intl.Collator.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale." }
		},
		"urierror": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError", "title": "URIError", "description": "The URIError object represents an error when a global URI handling function was used in a wrong way." },
		"dataview": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
			"title": "DataView",
			"description": "The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.",
			"buffer": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer", "title": "DataView.prototype.buffer", "description": "The buffer accessor property represents the ArrayBuffer or SharedArrayBuffer referenced by the DataView at construction time." },
			"getint8": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8", "title": "DataView.prototype.getInt8()", "description": "The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView." },
			"setint8": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8", "title": "DataView.prototype.setInt8()", "description": "The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView." },
			"getint32": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32", "title": "DataView.prototype.getInt32()", "description": "The getInt32() method gets a signed 32-bit integer (long) at the specified byte offset from the start of the DataView." },
			"getuint8": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8", "title": "DataView.prototype.getUint8()", "description": "The getUint8() method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the DataView." },
			"setint16": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16", "title": "DataView.prototype.setInt16()", "description": "The setInt16() method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView." },
			"setint32": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32", "title": "DataView.prototype.setInt32()", "description": "The setInt32() method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the DataView." },
			"setuint8": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8", "title": "DataView.prototype.setUint8()", "description": "The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView." },
			"getint16": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16", "title": "DataView.prototype.getInt16()", "description": "The getInt16() method gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView." },
			"setuint32": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32", "title": "DataView.prototype.setUint32()", "description": "The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the DataView." },
			"setuint16": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16", "title": "DataView.prototype.setUint16()", "description": "The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the DataView." },
			"getuint32": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32", "title": "DataView.prototype.getUint32()", "description": "The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the DataView." },
			"getuint16": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16", "title": "DataView.prototype.getUint16()", "description": "The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the DataView." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/prototype", "title": "DataView.prototype", "description": "The DataView.prototype property represents the prototype for the DataView object." },
			"byteoffset": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset", "title": "DataView.prototype.byteOffset", "description": "The byteOffset accessor property represents the offset (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer." },
			"setfloat32": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32", "title": "DataView.prototype.setFloat32()", "description": "The setFloat32() method stores a signed 32-bit float (float) value at the specified byte offset from the start of the DataView." },
			"setfloat64": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64", "title": "DataView.prototype.setFloat64()", "description": "The setFloat64() method stores a signed 64-bit float (double) value at the specified byte offset from the start of the DataView." },
			"getfloat32": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32", "title": "DataView.prototype.getFloat32()", "description": "The getFloat32() method gets a signed 32-bit float (float) at the specified byte offset from the start of the DataView." },
			"getfloat64": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64", "title": "DataView.prototype.getFloat64()", "description": "The getFloat64() method gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView." },
			"bytelength": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength", "title": "DataView.prototype.byteLength", "description": "The byteLength accessor property represents the length (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer." }
		},
		"unescape": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape", "title": "unescape()", "description": "The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape." },
		"parseint": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt", "title": "parseInt()", "description": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems)." },
		"isfinite": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite", "title": "isFinite()", "description": "The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number." },
		"typeerror": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError", "title": "TypeError", "description": "The TypeError object represents an error when a value is not of the expected type." },
		"generator": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
			"title": "Generator",
			"description": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.",
			"next": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next", "title": "Generator.prototype.next()", "description": "The next() method returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator." },
			"throw": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw", "title": "Generator.prototype.throw()", "description": "The throw() method resumes the execution of a generator by throwing an error into it and returns an object with two properties done and value." },
			"return": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return", "title": "Generator.prototype.return()", "description": "The return() method returns the given value and finishes the generator." }
		},
		"decodeuri": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI", "title": "decodeURI()", "description": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine." },
		"evalerror": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError", "title": "EvalError", "description": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility." },
		"encodeuri": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI", "title": "encodeURI()", "description": "The encodeURI() function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)." },
		"undefined": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined", "title": "undefined", "description": "The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types." },
		"int8array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array", "title": "Int8Array", "description": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"globalthis": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis", "title": "globalThis", "description": "The global globalThis property contains the global this value, which is akin to the global object. (See below for more details)." },
		"typedarray": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
			"title": "TypedArray",
			"description": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
			"of": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of", "title": "TypedArray.of()", "description": "The TypedArray.of() method creates a new typed array from a variable number of arguments. This method is nearly the same as Array.of()." },
			"set": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set", "title": "TypedArray.prototype.set()", "description": "The set() method stores multiple values in the typed array, reading input values from a specified array." },
			"map": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map", "title": "TypedArray.prototype.map()", "description": "The map() method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as Array.prototype.map(). TypedArray is one of the typed array types here." },
			"some": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some", "title": "TypedArray.prototype.some()", "description": "The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here." },
			"move": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move", "title": "TypedArray.prototype.move()", "description": "The move() method used to copy the sequence of array elements within the array to the position starting at target. However, this non-standard method has been replaced with the standard TypedArray.prototype.copyWithin() method. TypedArray is one of the typed array types here." },
			"name": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name", "title": "TypedArray.name", "description": "The TypedArray.name property represents a string value of the typed array constructor name." },
			"sort": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort", "title": "TypedArray.prototype.sort()", "description": "The sort() method sorts the elements of a typed array numerically in place and returns the typed array. This method has the same algorithm as Array.prototype.sort(), except that sorts the values numerically instead of as strings. TypedArray is one of the typed array types here." },
			"keys": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys", "title": "TypedArray.prototype.keys()", "description": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array." },
			"join": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join", "title": "TypedArray.prototype.join()", "description": "The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here." },
			"from": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from", "title": "TypedArray.from()", "description": "The TypedArray.from() method creates a new typed array from an array-like or iterable object. This method is nearly the same as Array.from()." },
			"find": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find", "title": "TypedArray.prototype.find()", "description": "The find() method returns a value in the typed array, if an element satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here." },
			"fill": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill", "title": "TypedArray.prototype.fill()", "description": "The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here." },
			"every": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every", "title": "TypedArray.prototype.every()", "description": "The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here." },
			"slice": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice", "title": "TypedArray.prototype.slice()", "description": "The slice() method returns a shallow copy of a portion of a typed array into a new typed array object. This method has the same algorithm as Array.prototype.slice(). TypedArray is one of the typed array types here." },
			"reduce": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce", "title": "TypedArray.prototype.reduce()", "description": "The reduce() method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduce(). TypedArray is one of the typed array types here." },
			"buffer": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer", "title": "TypedArray.prototype.buffer", "description": "The buffer accessor property represents the ArrayBuffer referenced by a TypedArray at construction time." },
			"values": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values", "title": "TypedArray.prototype.values()", "description": "The values() method returns a new Array Iterator object that contains the values for each index in the array." },
			"length": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length", "title": "TypedArray.prototype.length", "description": "The length accessor property represents the length (in elements) of a typed array." },
			"filter": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter", "title": "TypedArray.prototype.filter()", "description": "The filter() method creates a new typed array with all elements that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter(). TypedArray is one of the typed array types here." },
			"reverse": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse", "title": "TypedArray.prototype.reverse()", "description": "The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here." },
			"indexof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf", "title": "TypedArray.prototype.indexOf()", "description": "The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here." },
			"foreach": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach", "title": "TypedArray.prototype.forEach()", "description": "The forEach() method executes a provided function once per array element. This method has the same algorithm as Array.prototype.forEach(). TypedArray is one of the typed array types here." },
			"entries": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries", "title": "TypedArray.prototype.entries()", "description": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array." },
			"subarray": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray", "title": "TypedArray.prototype.subarray()", "description": "The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types." },
			"tostring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString", "title": "TypedArray.prototype.toString()", "description": "The toString() method returns a string representing the specified array and its elements. This method has the same algorithm as Array.prototype.toString(). TypedArray is one of the typed array types here." },
			"includes": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes", "title": "TypedArray.prototype.includes()", "description": "The includes() method determines whether a typed array includes a certain element, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes(). TypedArray is one of the typed array types here." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype", "title": "TypedArray.prototype", "description": "The TypedArray.prototype property represents the prototype for TypedArray constructors." },
			"@@species": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@species", "title": "get TypedArray[@@species]", "description": "The TypedArray[@@species] accessor property returns the constructor of a typed array." },
			"findindex": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex", "title": "TypedArray.prototype.findIndex()", "description": "The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned." },
			"@@iterator": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator", "title": "TypedArray.prototype[@@iterator]()", "description": "The initial value of the @@iterator property is the same function object as the initial value of the values property." },
			"copywithin": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin", "title": "TypedArray.prototype.copyWithin()", "description": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here." },
			"byteoffset": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset", "title": "TypedArray.prototype.byteOffset", "description": "The byteOffset accessor property represents the offset (in bytes) of a typed array from the start of its ArrayBuffer." },
			"bytelength": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength", "title": "TypedArray.prototype.byteLength", "description": "The byteLength accessor property represents the length (in bytes) of a typed array." },
			"lastindexof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf", "title": "TypedArray.prototype.lastIndexOf()", "description": "The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here." },
			"reduceright": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight", "title": "TypedArray.prototype.reduceRight()", "description": "The reduceRight() method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight(). TypedArray is one of the typed array types here." },
			"tolocalestring": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString", "title": "TypedArray.prototype.toLocaleString()", "description": "The toLocaleString() method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma “,”). This method has the same algorithm as Array.prototype.toLocaleString() and, as the typed array elements are numbers, the same algorithm as Number.prototype.toLocaleString() applies for each element. TypedArray is one of the typed array types here." },
			"bytes_per_element": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT", "title": "TypedArray.BYTES_PER_ELEMENT", "description": "The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array." }
		},
		"parsefloat": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat", "title": "parseFloat()", "description": "The parseFloat() function parses an argument and returns a floating point number." },
		"listformat": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat",
			"title": "Intl.ListFormat",
			"description": "The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.",
			"format": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/format", "title": "Intl​.ListFormat.prototype​.format()", "description": "" },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/prototype", "title": "Intl.ListFormat.prototype", "description": "See ListFormat for a description of Intl.ListFormat instances." },
			"formattoparts": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/formatToParts", "title": "Intl​.List​Format​.prototype​.formatToParts()", "description": "" },
			"resolvedoptions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/resolvedOptions", "title": "Intl​.List​Format​.prototype​.resolvedOptions", "description": "" },
			"supportedlocalesof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/supportedLocalesOf", "title": "Intl.ListFormat.supportedLocalesOf()", "description": "The Intl.ListFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale." }
		},
		"uint8array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array", "title": "Uint8Array", "description": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"rangeerror": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError", "title": "RangeError", "description": "The RangeError object indicates an error when a value is not in the set or range of allowed values." },
		"int16array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array", "title": "Int16Array", "description": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"int32array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array", "title": "Int32Array", "description": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"arraybuffer": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
			"title": "ArrayBuffer",
			"description": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.",
			"slice": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice", "title": "ArrayBuffer.prototype.slice()", "description": "The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive." },
			"isview": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView", "title": "ArrayBuffer.isView()", "description": "The ArrayBuffer.isView() method returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise." },
			"transfer": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer", "title": "ArrayBuffer.transfer()", "description": "The static ArrayBuffer.transfer() method returns a new ArrayBuffer whose contents have been taken from the oldBuffer's data and then is either truncated or zero-extended by newByteLength. If newByteLength is undefined, the byteLength of the oldBuffer is used. This operation leaves oldBuffer in a detached state." },
			"@@species": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species", "title": "get ArrayBuffer[@@species]", "description": "The ArrayBuffer[@@species] accessor property returns the ArrayBuffer constructor." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/prototype", "title": "ArrayBuffer.prototype", "description": "The ArrayBuffer.prototype property represents the prototype for the ArrayBuffer object." },
			"bytelength": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength", "title": "ArrayBuffer.prototype.byteLength", "description": "The byteLength accessor property represents the length of an ArrayBuffer in bytes." }
		},
		"pluralrules": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules",
			"title": "Intl.PluralRules",
			"description": "The Intl.PluralRules object is a constructor for objects that enable plural sensitive formatting and plural language rules.",
			"select": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/select", "title": "Intl.PluralRules.select()", "description": "The Intl.PluralRules.prototype.select method returns a String indicating which plural rule to use for locale-aware formatting." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/prototype", "title": "Intl.PluralRules.prototype", "description": "The Intl.PluralRules.prototype property represents the prototype object for the Intl.PluralRules constructor." },
			"resolvedoptions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/resolvedOptions", "title": "Intl.PluralRules.prototype.resolvedOptions()", "description": "The Intl.PluralRules.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this PluralRules object." },
			"supportedlocalesof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/supportedLocalesOf", "title": "Intl.PluralRules.supportedLocalesOf()", "description": "The Intl.PluralRules.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in plural formatting without having to fall back to the runtime's default locale." }
		},
		"syntaxerror": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError", "title": "SyntaxError", "description": "The SyntaxError object represents an error when trying to interpret syntactically invalid code." },
		"uint16array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array", "title": "Uint16Array", "description": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"uint32array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array", "title": "Uint32Array", "description": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"webassembly": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly",
			"title": "WebAssembly",
			"description": "The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.",
			"compile": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile", "title": "WebAssembly.compile()", "description": "The WebAssembly.compile() function compiles a WebAssembly.Module from WebAssembly binary code.  This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiate() function should be used)." },
			"validate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate", "title": "WebAssembly.validate()", "description": "The WebAssembly.validate() function validates a given typed array of WebAssembly binary code, returning whether the bytes form a valid wasm module (true) or not (false)." },
			"instantiate": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate", "title": "WebAssembly.instantiate()", "description": "The WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code. This function has two overloads:" },
			"compilestreaming": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming", "title": "WebAssembly.compileStreaming()", "description": "The WebAssembly.compileStreaming() function compiles a WebAssembly.Module directly from a streamed underlying source.  This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiateStreaming() function should be used)." },
			"instantiatestreaming": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming", "title": "WebAssembly.instantiateStreaming()", "description": "The WebAssembly.instantiateStreaming() function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code." }
		},
		"float32array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array", "title": "Float32Array", "description": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"float64array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array", "title": "Float64Array", "description": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"numberformat": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat",
			"title": "Intl.NumberFormat",
			"description": "The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.",
			"format": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format", "title": "Intl.NumberFormat.prototype.format()", "description": "The Intl.NumberFormat.prototype.format() method formats a number according to the locale and formatting options of this NumberFormat object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/prototype", "title": "Intl.NumberFormat.prototype", "description": "The Intl.NumberFormat.prototype property represents the prototype object for the Intl.NumberFormat constructor." },
			"formattoparts": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/formatToParts", "title": "Intl.NumberFormat.prototype.formatToParts()", "description": "The Intl.Numberformat.prototype.formatToParts() method allows locale-aware formatting of strings produced by NumberTimeFormat formatters." },
			"resolvedoptions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/resolvedOptions", "title": "Intl.NumberFormat.prototype.resolvedOptions()", "description": "The Intl.NumberFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this NumberFormat object." },
			"supportedlocalesof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/supportedLocalesOf", "title": "Intl.NumberFormat.supportedLocalesOf()", "description": "The Intl.NumberFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale." }
		},
		"bigint64array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array", "title": "BigInt64Array", "description": "content here." },
		"asyncfunction": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction", "title": "AsyncFunction", "description": "The AsyncFunction constructor creates a new async function object. In JavaScript every asynchronous function is actually an AsyncFunction object.", "prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/prototype", "title": "AsyncFunction.prototype", "description": "The AsyncFunction.prototype property represents the AsyncFunction prototype object." } },
		"internalerror": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError", "title": "InternalError", "description": "The InternalError object indicates an error that occurred internally in the JavaScript engine. For example: \"InternalError: too much recursion\"." },
		"referenceerror": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError", "title": "ReferenceError", "description": "The ReferenceError object represents an error when a non-existent variable is referenced." },
		"datetimeformat": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat",
			"title": "Intl.DateTimeFormat",
			"description": "The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.",
			"format": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format", "title": "Intl.DateTimeFormat.prototype.format()", "description": "The Intl.DateTimeFormat.prototype.format() method formats a date according to the locale and formatting options of this Intl.DateTimeFormat object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/prototype", "title": "Intl.DateTimeFormat.prototype", "description": "The Intl.DateTimeFormat.prototype property represents the prototype object for the Intl.DateTimeFormat constructor." },
			"formattoparts": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts", "title": "Intl.DateTimeFormat.prototype.formatToParts()", "description": "The Intl.DateTimeFormat.prototype.formatToParts() method allows locale-aware formatting of strings produced by DateTimeFormat formatters." },
			"resolvedoptions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions", "title": "Intl.DateTimeFormat.prototype.resolvedOptions()", "description": "The Intl.DateTimeFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object." },
			"supportedlocalesof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/supportedLocalesOf", "title": "Intl.DateTimeFormat.supportedLocalesOf()", "description": "The Intl.DateTimeFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale." }
		},
		"biguint64array": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array", "title": "BigUint64Array", "description": "content here." },
		"uint8clampedarray": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray", "title": "Uint8ClampedArray", "description": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)." },
		"sharedarraybuffer": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
			"title": "SharedArrayBuffer",
			"description": "The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.",
			"slice": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice", "title": "SharedArrayBuffer.prototype.slice()", "description": "The SharedArrayBuffer.prototype.slice() method returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning. This method has the same algorithm as Array.prototype.slice()." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/prototype", "title": "SharedArrayBuffer.prototype", "description": "The SharedArrayBuffer.prototype property represents the prototype for the SharedArrayBuffer object." },
			"bytelength": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength", "title": "SharedArrayBuffer.prototype.byteLength", "description": "The byteLength accessor property represents the length of an SharedArrayBuffer in bytes." }
		},
		"generatorfunction": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction", "title": "GeneratorFunction", "description": "The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.", "prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype", "title": "GeneratorFunction.prototype", "description": "The GeneratorFunction.prototype property represents the GeneratorFunction prototype object." } },
		"decodeuricomponent": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent", "title": "decodeURIComponent()", "description": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine." },
		"encodeuricomponent": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent", "title": "encodeURIComponent()", "description": "The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)." },
		"relativetimeformat": {
			"href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat",
			"title": "Intl.RelativeTimeFormat",
			"description": "The Intl.RelativeTimeFormat object is a constructor for objects that enable language-sensitive relative time formatting.",
			"format": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/format", "title": "Intl.RelativeTimeFormat.prototype.format()", "description": "The Intl.RelativeTimeFormat.prototype.format() method formats a value and unit according to the locale and formatting options of this RelativeTimeFormat object." },
			"prototype": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/prototype", "title": "Intl.RelativeTimeFormat.prototype", "description": "The Intl.RelativeTimeFormat.prototype property represents the prototype object for the Intl.RelativeTimeFormat constructor." },
			"formattoparts": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/formatToParts", "title": "Intl.RelativeTimeFormat.prototype.formatToParts()", "description": "The Intl.RelativeTimeFormat.prototype.formatToParts() method returns an Array of objects representing the relative time format in parts that can be used for custom locale-aware formatting." },
			"resolvedoptions": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/resolvedOptions", "title": "Intl.RelativeTimeFormat.prototype.resolvedOptions()", "description": "The Intl.RelativeTimeFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this RelativeTimeFormat object." },
			"supportedlocalesof": { "href": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/supportedLocalesOf", "title": "Intl.RelativeTimeFormat.supportedLocalesOf()", "description": "The Intl.RelativeTimeFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale." }
		}
	},
	"iteration_protocols": { "href": "/en-US/docs/Web/JavaScript/Reference/Iteration_protocols", "title": "Iteration protocols" },
	"deprecated_and_obsolete_features": { "href": "/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features", "title": "Deprecated features" }
}
